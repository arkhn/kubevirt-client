# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1KubeVirtStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[V1KubeVirtCondition]',
        'default_architecture': 'str',
        'generations': 'list[V1GenerationStatus]',
        'observed_deployment_config': 'str',
        'observed_deployment_id': 'str',
        'observed_generation': 'int',
        'observed_kube_virt_registry': 'str',
        'observed_kube_virt_version': 'str',
        'operator_version': 'str',
        'outdated_virtual_machine_instance_workloads': 'int',
        'phase': 'str',
        'synchronization_addresses': 'list[str]',
        'target_deployment_config': 'str',
        'target_deployment_id': 'str',
        'target_kube_virt_registry': 'str',
        'target_kube_virt_version': 'str'
    }

    attribute_map = {
        'conditions': 'conditions',
        'default_architecture': 'defaultArchitecture',
        'generations': 'generations',
        'observed_deployment_config': 'observedDeploymentConfig',
        'observed_deployment_id': 'observedDeploymentID',
        'observed_generation': 'observedGeneration',
        'observed_kube_virt_registry': 'observedKubeVirtRegistry',
        'observed_kube_virt_version': 'observedKubeVirtVersion',
        'operator_version': 'operatorVersion',
        'outdated_virtual_machine_instance_workloads': 'outdatedVirtualMachineInstanceWorkloads',
        'phase': 'phase',
        'synchronization_addresses': 'synchronizationAddresses',
        'target_deployment_config': 'targetDeploymentConfig',
        'target_deployment_id': 'targetDeploymentID',
        'target_kube_virt_registry': 'targetKubeVirtRegistry',
        'target_kube_virt_version': 'targetKubeVirtVersion'
    }

    def __init__(self, conditions=None, default_architecture=None, generations=None, observed_deployment_config=None, observed_deployment_id=None, observed_generation=None, observed_kube_virt_registry=None, observed_kube_virt_version=None, operator_version=None, outdated_virtual_machine_instance_workloads=None, phase=None, synchronization_addresses=None, target_deployment_config=None, target_deployment_id=None, target_kube_virt_registry=None, target_kube_virt_version=None):
        """
        V1KubeVirtStatus - a model defined in Swagger
        """

        self._conditions = None
        self._default_architecture = None
        self._generations = None
        self._observed_deployment_config = None
        self._observed_deployment_id = None
        self._observed_generation = None
        self._observed_kube_virt_registry = None
        self._observed_kube_virt_version = None
        self._operator_version = None
        self._outdated_virtual_machine_instance_workloads = None
        self._phase = None
        self._synchronization_addresses = None
        self._target_deployment_config = None
        self._target_deployment_id = None
        self._target_kube_virt_registry = None
        self._target_kube_virt_version = None

        if conditions is not None:
          self.conditions = conditions
        if default_architecture is not None:
          self.default_architecture = default_architecture
        if generations is not None:
          self.generations = generations
        if observed_deployment_config is not None:
          self.observed_deployment_config = observed_deployment_config
        if observed_deployment_id is not None:
          self.observed_deployment_id = observed_deployment_id
        if observed_generation is not None:
          self.observed_generation = observed_generation
        if observed_kube_virt_registry is not None:
          self.observed_kube_virt_registry = observed_kube_virt_registry
        if observed_kube_virt_version is not None:
          self.observed_kube_virt_version = observed_kube_virt_version
        if operator_version is not None:
          self.operator_version = operator_version
        if outdated_virtual_machine_instance_workloads is not None:
          self.outdated_virtual_machine_instance_workloads = outdated_virtual_machine_instance_workloads
        if phase is not None:
          self.phase = phase
        if synchronization_addresses is not None:
          self.synchronization_addresses = synchronization_addresses
        if target_deployment_config is not None:
          self.target_deployment_config = target_deployment_config
        if target_deployment_id is not None:
          self.target_deployment_id = target_deployment_id
        if target_kube_virt_registry is not None:
          self.target_kube_virt_registry = target_kube_virt_registry
        if target_kube_virt_version is not None:
          self.target_kube_virt_version = target_kube_virt_version

    @property
    def conditions(self):
        """
        Gets the conditions of this V1KubeVirtStatus.

        :return: The conditions of this V1KubeVirtStatus.
        :rtype: list[V1KubeVirtCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this V1KubeVirtStatus.

        :param conditions: The conditions of this V1KubeVirtStatus.
        :type: list[V1KubeVirtCondition]
        """

        self._conditions = conditions

    @property
    def default_architecture(self):
        """
        Gets the default_architecture of this V1KubeVirtStatus.

        :return: The default_architecture of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._default_architecture

    @default_architecture.setter
    def default_architecture(self, default_architecture):
        """
        Sets the default_architecture of this V1KubeVirtStatus.

        :param default_architecture: The default_architecture of this V1KubeVirtStatus.
        :type: str
        """

        self._default_architecture = default_architecture

    @property
    def generations(self):
        """
        Gets the generations of this V1KubeVirtStatus.

        :return: The generations of this V1KubeVirtStatus.
        :rtype: list[V1GenerationStatus]
        """
        return self._generations

    @generations.setter
    def generations(self, generations):
        """
        Sets the generations of this V1KubeVirtStatus.

        :param generations: The generations of this V1KubeVirtStatus.
        :type: list[V1GenerationStatus]
        """

        self._generations = generations

    @property
    def observed_deployment_config(self):
        """
        Gets the observed_deployment_config of this V1KubeVirtStatus.

        :return: The observed_deployment_config of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._observed_deployment_config

    @observed_deployment_config.setter
    def observed_deployment_config(self, observed_deployment_config):
        """
        Sets the observed_deployment_config of this V1KubeVirtStatus.

        :param observed_deployment_config: The observed_deployment_config of this V1KubeVirtStatus.
        :type: str
        """

        self._observed_deployment_config = observed_deployment_config

    @property
    def observed_deployment_id(self):
        """
        Gets the observed_deployment_id of this V1KubeVirtStatus.

        :return: The observed_deployment_id of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._observed_deployment_id

    @observed_deployment_id.setter
    def observed_deployment_id(self, observed_deployment_id):
        """
        Sets the observed_deployment_id of this V1KubeVirtStatus.

        :param observed_deployment_id: The observed_deployment_id of this V1KubeVirtStatus.
        :type: str
        """

        self._observed_deployment_id = observed_deployment_id

    @property
    def observed_generation(self):
        """
        Gets the observed_generation of this V1KubeVirtStatus.

        :return: The observed_generation of this V1KubeVirtStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """
        Sets the observed_generation of this V1KubeVirtStatus.

        :param observed_generation: The observed_generation of this V1KubeVirtStatus.
        :type: int
        """

        self._observed_generation = observed_generation

    @property
    def observed_kube_virt_registry(self):
        """
        Gets the observed_kube_virt_registry of this V1KubeVirtStatus.

        :return: The observed_kube_virt_registry of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._observed_kube_virt_registry

    @observed_kube_virt_registry.setter
    def observed_kube_virt_registry(self, observed_kube_virt_registry):
        """
        Sets the observed_kube_virt_registry of this V1KubeVirtStatus.

        :param observed_kube_virt_registry: The observed_kube_virt_registry of this V1KubeVirtStatus.
        :type: str
        """

        self._observed_kube_virt_registry = observed_kube_virt_registry

    @property
    def observed_kube_virt_version(self):
        """
        Gets the observed_kube_virt_version of this V1KubeVirtStatus.

        :return: The observed_kube_virt_version of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._observed_kube_virt_version

    @observed_kube_virt_version.setter
    def observed_kube_virt_version(self, observed_kube_virt_version):
        """
        Sets the observed_kube_virt_version of this V1KubeVirtStatus.

        :param observed_kube_virt_version: The observed_kube_virt_version of this V1KubeVirtStatus.
        :type: str
        """

        self._observed_kube_virt_version = observed_kube_virt_version

    @property
    def operator_version(self):
        """
        Gets the operator_version of this V1KubeVirtStatus.

        :return: The operator_version of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._operator_version

    @operator_version.setter
    def operator_version(self, operator_version):
        """
        Sets the operator_version of this V1KubeVirtStatus.

        :param operator_version: The operator_version of this V1KubeVirtStatus.
        :type: str
        """

        self._operator_version = operator_version

    @property
    def outdated_virtual_machine_instance_workloads(self):
        """
        Gets the outdated_virtual_machine_instance_workloads of this V1KubeVirtStatus.

        :return: The outdated_virtual_machine_instance_workloads of this V1KubeVirtStatus.
        :rtype: int
        """
        return self._outdated_virtual_machine_instance_workloads

    @outdated_virtual_machine_instance_workloads.setter
    def outdated_virtual_machine_instance_workloads(self, outdated_virtual_machine_instance_workloads):
        """
        Sets the outdated_virtual_machine_instance_workloads of this V1KubeVirtStatus.

        :param outdated_virtual_machine_instance_workloads: The outdated_virtual_machine_instance_workloads of this V1KubeVirtStatus.
        :type: int
        """

        self._outdated_virtual_machine_instance_workloads = outdated_virtual_machine_instance_workloads

    @property
    def phase(self):
        """
        Gets the phase of this V1KubeVirtStatus.

        :return: The phase of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """
        Sets the phase of this V1KubeVirtStatus.

        :param phase: The phase of this V1KubeVirtStatus.
        :type: str
        """

        self._phase = phase

    @property
    def synchronization_addresses(self):
        """
        Gets the synchronization_addresses of this V1KubeVirtStatus.

        :return: The synchronization_addresses of this V1KubeVirtStatus.
        :rtype: list[str]
        """
        return self._synchronization_addresses

    @synchronization_addresses.setter
    def synchronization_addresses(self, synchronization_addresses):
        """
        Sets the synchronization_addresses of this V1KubeVirtStatus.

        :param synchronization_addresses: The synchronization_addresses of this V1KubeVirtStatus.
        :type: list[str]
        """

        self._synchronization_addresses = synchronization_addresses

    @property
    def target_deployment_config(self):
        """
        Gets the target_deployment_config of this V1KubeVirtStatus.

        :return: The target_deployment_config of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._target_deployment_config

    @target_deployment_config.setter
    def target_deployment_config(self, target_deployment_config):
        """
        Sets the target_deployment_config of this V1KubeVirtStatus.

        :param target_deployment_config: The target_deployment_config of this V1KubeVirtStatus.
        :type: str
        """

        self._target_deployment_config = target_deployment_config

    @property
    def target_deployment_id(self):
        """
        Gets the target_deployment_id of this V1KubeVirtStatus.

        :return: The target_deployment_id of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._target_deployment_id

    @target_deployment_id.setter
    def target_deployment_id(self, target_deployment_id):
        """
        Sets the target_deployment_id of this V1KubeVirtStatus.

        :param target_deployment_id: The target_deployment_id of this V1KubeVirtStatus.
        :type: str
        """

        self._target_deployment_id = target_deployment_id

    @property
    def target_kube_virt_registry(self):
        """
        Gets the target_kube_virt_registry of this V1KubeVirtStatus.

        :return: The target_kube_virt_registry of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._target_kube_virt_registry

    @target_kube_virt_registry.setter
    def target_kube_virt_registry(self, target_kube_virt_registry):
        """
        Sets the target_kube_virt_registry of this V1KubeVirtStatus.

        :param target_kube_virt_registry: The target_kube_virt_registry of this V1KubeVirtStatus.
        :type: str
        """

        self._target_kube_virt_registry = target_kube_virt_registry

    @property
    def target_kube_virt_version(self):
        """
        Gets the target_kube_virt_version of this V1KubeVirtStatus.

        :return: The target_kube_virt_version of this V1KubeVirtStatus.
        :rtype: str
        """
        return self._target_kube_virt_version

    @target_kube_virt_version.setter
    def target_kube_virt_version(self, target_kube_virt_version):
        """
        Sets the target_kube_virt_version of this V1KubeVirtStatus.

        :param target_kube_virt_version: The target_kube_virt_version of this V1KubeVirtStatus.
        :type: str
        """

        self._target_kube_virt_version = target_kube_virt_version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1KubeVirtStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
