# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineInstanceGuestAgentInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'fs_freeze_status': 'str',
        'fs_info': 'V1VirtualMachineInstanceFileSystemInfo',
        'guest_agent_version': 'str',
        'hostname': 'str',
        'kind': 'str',
        'os': 'V1VirtualMachineInstanceGuestOSInfo',
        'supported_commands': 'list[V1GuestAgentCommandInfo]',
        'timezone': 'str',
        'user_list': 'list[V1VirtualMachineInstanceGuestOSUser]'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'fs_freeze_status': 'fsFreezeStatus',
        'fs_info': 'fsInfo',
        'guest_agent_version': 'guestAgentVersion',
        'hostname': 'hostname',
        'kind': 'kind',
        'os': 'os',
        'supported_commands': 'supportedCommands',
        'timezone': 'timezone',
        'user_list': 'userList'
    }

    def __init__(self, api_version=None, fs_freeze_status=None, fs_info=None, guest_agent_version=None, hostname=None, kind=None, os=None, supported_commands=None, timezone=None, user_list=None):
        """
        V1VirtualMachineInstanceGuestAgentInfo - a model defined in Swagger
        """

        self._api_version = None
        self._fs_freeze_status = None
        self._fs_info = None
        self._guest_agent_version = None
        self._hostname = None
        self._kind = None
        self._os = None
        self._supported_commands = None
        self._timezone = None
        self._user_list = None

        if api_version is not None:
          self.api_version = api_version
        if fs_freeze_status is not None:
          self.fs_freeze_status = fs_freeze_status
        if fs_info is not None:
          self.fs_info = fs_info
        if guest_agent_version is not None:
          self.guest_agent_version = guest_agent_version
        if hostname is not None:
          self.hostname = hostname
        if kind is not None:
          self.kind = kind
        if os is not None:
          self.os = os
        if supported_commands is not None:
          self.supported_commands = supported_commands
        if timezone is not None:
          self.timezone = timezone
        if user_list is not None:
          self.user_list = user_list

    @property
    def api_version(self):
        """
        Gets the api_version of this V1VirtualMachineInstanceGuestAgentInfo.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

        :return: The api_version of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this V1VirtualMachineInstanceGuestAgentInfo.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

        :param api_version: The api_version of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: str
        """

        self._api_version = api_version

    @property
    def fs_freeze_status(self):
        """
        Gets the fs_freeze_status of this V1VirtualMachineInstanceGuestAgentInfo.
        FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed

        :return: The fs_freeze_status of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: str
        """
        return self._fs_freeze_status

    @fs_freeze_status.setter
    def fs_freeze_status(self, fs_freeze_status):
        """
        Sets the fs_freeze_status of this V1VirtualMachineInstanceGuestAgentInfo.
        FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed

        :param fs_freeze_status: The fs_freeze_status of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: str
        """

        self._fs_freeze_status = fs_freeze_status

    @property
    def fs_info(self):
        """
        Gets the fs_info of this V1VirtualMachineInstanceGuestAgentInfo.
        FSInfo is a guest os filesystem information containing the disk mapping and disk mounts with usage

        :return: The fs_info of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: V1VirtualMachineInstanceFileSystemInfo
        """
        return self._fs_info

    @fs_info.setter
    def fs_info(self, fs_info):
        """
        Sets the fs_info of this V1VirtualMachineInstanceGuestAgentInfo.
        FSInfo is a guest os filesystem information containing the disk mapping and disk mounts with usage

        :param fs_info: The fs_info of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: V1VirtualMachineInstanceFileSystemInfo
        """

        self._fs_info = fs_info

    @property
    def guest_agent_version(self):
        """
        Gets the guest_agent_version of this V1VirtualMachineInstanceGuestAgentInfo.
        GAVersion is a version of currently installed guest agent

        :return: The guest_agent_version of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: str
        """
        return self._guest_agent_version

    @guest_agent_version.setter
    def guest_agent_version(self, guest_agent_version):
        """
        Sets the guest_agent_version of this V1VirtualMachineInstanceGuestAgentInfo.
        GAVersion is a version of currently installed guest agent

        :param guest_agent_version: The guest_agent_version of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: str
        """

        self._guest_agent_version = guest_agent_version

    @property
    def hostname(self):
        """
        Gets the hostname of this V1VirtualMachineInstanceGuestAgentInfo.
        Hostname represents FQDN of a guest

        :return: The hostname of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this V1VirtualMachineInstanceGuestAgentInfo.
        Hostname represents FQDN of a guest

        :param hostname: The hostname of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: str
        """

        self._hostname = hostname

    @property
    def kind(self):
        """
        Gets the kind of this V1VirtualMachineInstanceGuestAgentInfo.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

        :return: The kind of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this V1VirtualMachineInstanceGuestAgentInfo.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

        :param kind: The kind of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: str
        """

        self._kind = kind

    @property
    def os(self):
        """
        Gets the os of this V1VirtualMachineInstanceGuestAgentInfo.
        OS contains the guest operating system information

        :return: The os of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: V1VirtualMachineInstanceGuestOSInfo
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this V1VirtualMachineInstanceGuestAgentInfo.
        OS contains the guest operating system information

        :param os: The os of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: V1VirtualMachineInstanceGuestOSInfo
        """

        self._os = os

    @property
    def supported_commands(self):
        """
        Gets the supported_commands of this V1VirtualMachineInstanceGuestAgentInfo.
        Return command list the guest agent supports

        :return: The supported_commands of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: list[V1GuestAgentCommandInfo]
        """
        return self._supported_commands

    @supported_commands.setter
    def supported_commands(self, supported_commands):
        """
        Sets the supported_commands of this V1VirtualMachineInstanceGuestAgentInfo.
        Return command list the guest agent supports

        :param supported_commands: The supported_commands of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: list[V1GuestAgentCommandInfo]
        """

        self._supported_commands = supported_commands

    @property
    def timezone(self):
        """
        Gets the timezone of this V1VirtualMachineInstanceGuestAgentInfo.
        Timezone is guest os current timezone

        :return: The timezone of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this V1VirtualMachineInstanceGuestAgentInfo.
        Timezone is guest os current timezone

        :param timezone: The timezone of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: str
        """

        self._timezone = timezone

    @property
    def user_list(self):
        """
        Gets the user_list of this V1VirtualMachineInstanceGuestAgentInfo.
        UserList is a list of active guest OS users

        :return: The user_list of this V1VirtualMachineInstanceGuestAgentInfo.
        :rtype: list[V1VirtualMachineInstanceGuestOSUser]
        """
        return self._user_list

    @user_list.setter
    def user_list(self, user_list):
        """
        Sets the user_list of this V1VirtualMachineInstanceGuestAgentInfo.
        UserList is a list of active guest OS users

        :param user_list: The user_list of this V1VirtualMachineInstanceGuestAgentInfo.
        :type: list[V1VirtualMachineInstanceGuestOSUser]
        """

        self._user_list = user_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineInstanceGuestAgentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
