# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1VirtualMachineRestoreSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'patches': 'list[str]',
        'target': 'K8sIoApiCoreV1TypedLocalObjectReference',
        'virtual_machine_snapshot_name': 'str'
    }

    attribute_map = {
        'patches': 'patches',
        'target': 'target',
        'virtual_machine_snapshot_name': 'virtualMachineSnapshotName'
    }

    def __init__(self, patches=None, target=None, virtual_machine_snapshot_name=''):
        """
        V1beta1VirtualMachineRestoreSpec - a model defined in Swagger
        """

        self._patches = None
        self._target = None
        self._virtual_machine_snapshot_name = None

        if patches is not None:
          self.patches = patches
        self.target = target
        self.virtual_machine_snapshot_name = virtual_machine_snapshot_name

    @property
    def patches(self):
        """
        Gets the patches of this V1beta1VirtualMachineRestoreSpec.
        If the target for the restore does not exist, it will be created. Patches holds JSON patches that would be applied to the target manifest before it's created. Patches should fit the target's Kind.  Example for a patch: {\"op\": \"replace\", \"path\": \"/metadata/name\", \"value\": \"new-vm-name\"}

        :return: The patches of this V1beta1VirtualMachineRestoreSpec.
        :rtype: list[str]
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """
        Sets the patches of this V1beta1VirtualMachineRestoreSpec.
        If the target for the restore does not exist, it will be created. Patches holds JSON patches that would be applied to the target manifest before it's created. Patches should fit the target's Kind.  Example for a patch: {\"op\": \"replace\", \"path\": \"/metadata/name\", \"value\": \"new-vm-name\"}

        :param patches: The patches of this V1beta1VirtualMachineRestoreSpec.
        :type: list[str]
        """

        self._patches = patches

    @property
    def target(self):
        """
        Gets the target of this V1beta1VirtualMachineRestoreSpec.
        initially only VirtualMachine type supported

        :return: The target of this V1beta1VirtualMachineRestoreSpec.
        :rtype: K8sIoApiCoreV1TypedLocalObjectReference
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this V1beta1VirtualMachineRestoreSpec.
        initially only VirtualMachine type supported

        :param target: The target of this V1beta1VirtualMachineRestoreSpec.
        :type: K8sIoApiCoreV1TypedLocalObjectReference
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def virtual_machine_snapshot_name(self):
        """
        Gets the virtual_machine_snapshot_name of this V1beta1VirtualMachineRestoreSpec.

        :return: The virtual_machine_snapshot_name of this V1beta1VirtualMachineRestoreSpec.
        :rtype: str
        """
        return self._virtual_machine_snapshot_name

    @virtual_machine_snapshot_name.setter
    def virtual_machine_snapshot_name(self, virtual_machine_snapshot_name):
        """
        Sets the virtual_machine_snapshot_name of this V1beta1VirtualMachineRestoreSpec.

        :param virtual_machine_snapshot_name: The virtual_machine_snapshot_name of this V1beta1VirtualMachineRestoreSpec.
        :type: str
        """
        if virtual_machine_snapshot_name is None:
            raise ValueError("Invalid value for `virtual_machine_snapshot_name`, must not be `None`")

        self._virtual_machine_snapshot_name = virtual_machine_snapshot_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1VirtualMachineRestoreSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
