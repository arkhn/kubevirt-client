# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1VirtualMachineRestoreStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'complete': 'bool',
        'conditions': 'list[V1beta1Condition]',
        'deleted_data_volumes': 'list[str]',
        'restore_time': 'K8sIoApimachineryPkgApisMetaV1Time',
        'restores': 'list[V1beta1VolumeRestore]'
    }

    attribute_map = {
        'complete': 'complete',
        'conditions': 'conditions',
        'deleted_data_volumes': 'deletedDataVolumes',
        'restore_time': 'restoreTime',
        'restores': 'restores'
    }

    def __init__(self, complete=None, conditions=None, deleted_data_volumes=None, restore_time=None, restores=None):
        """
        V1beta1VirtualMachineRestoreStatus - a model defined in Swagger
        """

        self._complete = None
        self._conditions = None
        self._deleted_data_volumes = None
        self._restore_time = None
        self._restores = None

        if complete is not None:
          self.complete = complete
        if conditions is not None:
          self.conditions = conditions
        if deleted_data_volumes is not None:
          self.deleted_data_volumes = deleted_data_volumes
        if restore_time is not None:
          self.restore_time = restore_time
        if restores is not None:
          self.restores = restores

    @property
    def complete(self):
        """
        Gets the complete of this V1beta1VirtualMachineRestoreStatus.

        :return: The complete of this V1beta1VirtualMachineRestoreStatus.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """
        Sets the complete of this V1beta1VirtualMachineRestoreStatus.

        :param complete: The complete of this V1beta1VirtualMachineRestoreStatus.
        :type: bool
        """

        self._complete = complete

    @property
    def conditions(self):
        """
        Gets the conditions of this V1beta1VirtualMachineRestoreStatus.

        :return: The conditions of this V1beta1VirtualMachineRestoreStatus.
        :rtype: list[V1beta1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """
        Sets the conditions of this V1beta1VirtualMachineRestoreStatus.

        :param conditions: The conditions of this V1beta1VirtualMachineRestoreStatus.
        :type: list[V1beta1Condition]
        """

        self._conditions = conditions

    @property
    def deleted_data_volumes(self):
        """
        Gets the deleted_data_volumes of this V1beta1VirtualMachineRestoreStatus.

        :return: The deleted_data_volumes of this V1beta1VirtualMachineRestoreStatus.
        :rtype: list[str]
        """
        return self._deleted_data_volumes

    @deleted_data_volumes.setter
    def deleted_data_volumes(self, deleted_data_volumes):
        """
        Sets the deleted_data_volumes of this V1beta1VirtualMachineRestoreStatus.

        :param deleted_data_volumes: The deleted_data_volumes of this V1beta1VirtualMachineRestoreStatus.
        :type: list[str]
        """

        self._deleted_data_volumes = deleted_data_volumes

    @property
    def restore_time(self):
        """
        Gets the restore_time of this V1beta1VirtualMachineRestoreStatus.

        :return: The restore_time of this V1beta1VirtualMachineRestoreStatus.
        :rtype: K8sIoApimachineryPkgApisMetaV1Time
        """
        return self._restore_time

    @restore_time.setter
    def restore_time(self, restore_time):
        """
        Sets the restore_time of this V1beta1VirtualMachineRestoreStatus.

        :param restore_time: The restore_time of this V1beta1VirtualMachineRestoreStatus.
        :type: K8sIoApimachineryPkgApisMetaV1Time
        """

        self._restore_time = restore_time

    @property
    def restores(self):
        """
        Gets the restores of this V1beta1VirtualMachineRestoreStatus.

        :return: The restores of this V1beta1VirtualMachineRestoreStatus.
        :rtype: list[V1beta1VolumeRestore]
        """
        return self._restores

    @restores.setter
    def restores(self, restores):
        """
        Sets the restores of this V1beta1VirtualMachineRestoreStatus.

        :param restores: The restores of this V1beta1VirtualMachineRestoreStatus.
        :type: list[V1beta1VolumeRestore]
        """

        self._restores = restores

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1VirtualMachineRestoreStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
