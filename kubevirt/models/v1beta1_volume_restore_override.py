# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1VolumeRestoreOverride(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'dict(str, str)',
        'labels': 'dict(str, str)',
        'restore_name': 'str',
        'volume_name': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'labels': 'labels',
        'restore_name': 'restoreName',
        'volume_name': 'volumeName'
    }

    def __init__(self, annotations=None, labels=None, restore_name=None, volume_name=None):
        """
        V1beta1VolumeRestoreOverride - a model defined in Swagger
        """

        self._annotations = None
        self._labels = None
        self._restore_name = None
        self._volume_name = None

        if annotations is not None:
          self.annotations = annotations
        if labels is not None:
          self.labels = labels
        if restore_name is not None:
          self.restore_name = restore_name
        if volume_name is not None:
          self.volume_name = volume_name

    @property
    def annotations(self):
        """
        Gets the annotations of this V1beta1VolumeRestoreOverride.

        :return: The annotations of this V1beta1VolumeRestoreOverride.
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """
        Sets the annotations of this V1beta1VolumeRestoreOverride.

        :param annotations: The annotations of this V1beta1VolumeRestoreOverride.
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def labels(self):
        """
        Gets the labels of this V1beta1VolumeRestoreOverride.

        :return: The labels of this V1beta1VolumeRestoreOverride.
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this V1beta1VolumeRestoreOverride.

        :param labels: The labels of this V1beta1VolumeRestoreOverride.
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def restore_name(self):
        """
        Gets the restore_name of this V1beta1VolumeRestoreOverride.

        :return: The restore_name of this V1beta1VolumeRestoreOverride.
        :rtype: str
        """
        return self._restore_name

    @restore_name.setter
    def restore_name(self, restore_name):
        """
        Sets the restore_name of this V1beta1VolumeRestoreOverride.

        :param restore_name: The restore_name of this V1beta1VolumeRestoreOverride.
        :type: str
        """

        self._restore_name = restore_name

    @property
    def volume_name(self):
        """
        Gets the volume_name of this V1beta1VolumeRestoreOverride.

        :return: The volume_name of this V1beta1VolumeRestoreOverride.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """
        Sets the volume_name of this V1beta1VolumeRestoreOverride.

        :param volume_name: The volume_name of this V1beta1VolumeRestoreOverride.
        :type: str
        """

        self._volume_name = volume_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1VolumeRestoreOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
