# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1InterfaceBindingPlugin(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compute_resource_overhead': 'V1ResourceRequirementsWithoutClaims',
        'domain_attachment_type': 'str',
        'downward_api': 'str',
        'migration': 'V1InterfaceBindingMigration',
        'network_attachment_definition': 'str',
        'sidecar_image': 'str'
    }

    attribute_map = {
        'compute_resource_overhead': 'computeResourceOverhead',
        'domain_attachment_type': 'domainAttachmentType',
        'downward_api': 'downwardAPI',
        'migration': 'migration',
        'network_attachment_definition': 'networkAttachmentDefinition',
        'sidecar_image': 'sidecarImage'
    }

    def __init__(self, compute_resource_overhead=None, domain_attachment_type=None, downward_api=None, migration=None, network_attachment_definition=None, sidecar_image=None):
        """
        V1InterfaceBindingPlugin - a model defined in Swagger
        """

        self._compute_resource_overhead = None
        self._domain_attachment_type = None
        self._downward_api = None
        self._migration = None
        self._network_attachment_definition = None
        self._sidecar_image = None

        if compute_resource_overhead is not None:
          self.compute_resource_overhead = compute_resource_overhead
        if domain_attachment_type is not None:
          self.domain_attachment_type = domain_attachment_type
        if downward_api is not None:
          self.downward_api = downward_api
        if migration is not None:
          self.migration = migration
        if network_attachment_definition is not None:
          self.network_attachment_definition = network_attachment_definition
        if sidecar_image is not None:
          self.sidecar_image = sidecar_image

    @property
    def compute_resource_overhead(self):
        """
        Gets the compute_resource_overhead of this V1InterfaceBindingPlugin.
        ComputeResourceOverhead specifies the resource overhead that should be added to the compute container when using the binding. version: v1alphav1

        :return: The compute_resource_overhead of this V1InterfaceBindingPlugin.
        :rtype: V1ResourceRequirementsWithoutClaims
        """
        return self._compute_resource_overhead

    @compute_resource_overhead.setter
    def compute_resource_overhead(self, compute_resource_overhead):
        """
        Sets the compute_resource_overhead of this V1InterfaceBindingPlugin.
        ComputeResourceOverhead specifies the resource overhead that should be added to the compute container when using the binding. version: v1alphav1

        :param compute_resource_overhead: The compute_resource_overhead of this V1InterfaceBindingPlugin.
        :type: V1ResourceRequirementsWithoutClaims
        """

        self._compute_resource_overhead = compute_resource_overhead

    @property
    def domain_attachment_type(self):
        """
        Gets the domain_attachment_type of this V1InterfaceBindingPlugin.
        DomainAttachmentType is a standard domain network attachment method kubevirt supports. Supported values: \"tap\", \"managedTap\" (since v1.4). The standard domain attachment can be used instead or in addition to the sidecarImage. version: 1alphav1

        :return: The domain_attachment_type of this V1InterfaceBindingPlugin.
        :rtype: str
        """
        return self._domain_attachment_type

    @domain_attachment_type.setter
    def domain_attachment_type(self, domain_attachment_type):
        """
        Sets the domain_attachment_type of this V1InterfaceBindingPlugin.
        DomainAttachmentType is a standard domain network attachment method kubevirt supports. Supported values: \"tap\", \"managedTap\" (since v1.4). The standard domain attachment can be used instead or in addition to the sidecarImage. version: 1alphav1

        :param domain_attachment_type: The domain_attachment_type of this V1InterfaceBindingPlugin.
        :type: str
        """

        self._domain_attachment_type = domain_attachment_type

    @property
    def downward_api(self):
        """
        Gets the downward_api of this V1InterfaceBindingPlugin.
        DownwardAPI specifies what kind of data should be exposed to the binding plugin sidecar. Supported values: \"device-info\" version: v1alphav1

        :return: The downward_api of this V1InterfaceBindingPlugin.
        :rtype: str
        """
        return self._downward_api

    @downward_api.setter
    def downward_api(self, downward_api):
        """
        Sets the downward_api of this V1InterfaceBindingPlugin.
        DownwardAPI specifies what kind of data should be exposed to the binding plugin sidecar. Supported values: \"device-info\" version: v1alphav1

        :param downward_api: The downward_api of this V1InterfaceBindingPlugin.
        :type: str
        """

        self._downward_api = downward_api

    @property
    def migration(self):
        """
        Gets the migration of this V1InterfaceBindingPlugin.
        Migration means the VM using the plugin can be safely migrated version: 1alphav1

        :return: The migration of this V1InterfaceBindingPlugin.
        :rtype: V1InterfaceBindingMigration
        """
        return self._migration

    @migration.setter
    def migration(self, migration):
        """
        Sets the migration of this V1InterfaceBindingPlugin.
        Migration means the VM using the plugin can be safely migrated version: 1alphav1

        :param migration: The migration of this V1InterfaceBindingPlugin.
        :type: V1InterfaceBindingMigration
        """

        self._migration = migration

    @property
    def network_attachment_definition(self):
        """
        Gets the network_attachment_definition of this V1InterfaceBindingPlugin.
        NetworkAttachmentDefinition references to a NetworkAttachmentDefinition CR object. Format: <name>, <namespace>/<name>. If namespace is not specified, VMI namespace is assumed. version: 1alphav1

        :return: The network_attachment_definition of this V1InterfaceBindingPlugin.
        :rtype: str
        """
        return self._network_attachment_definition

    @network_attachment_definition.setter
    def network_attachment_definition(self, network_attachment_definition):
        """
        Sets the network_attachment_definition of this V1InterfaceBindingPlugin.
        NetworkAttachmentDefinition references to a NetworkAttachmentDefinition CR object. Format: <name>, <namespace>/<name>. If namespace is not specified, VMI namespace is assumed. version: 1alphav1

        :param network_attachment_definition: The network_attachment_definition of this V1InterfaceBindingPlugin.
        :type: str
        """

        self._network_attachment_definition = network_attachment_definition

    @property
    def sidecar_image(self):
        """
        Gets the sidecar_image of this V1InterfaceBindingPlugin.
        SidecarImage references a container image that runs in the virt-launcher pod. The sidecar handles (libvirt) domain configuration and optional services. version: 1alphav1

        :return: The sidecar_image of this V1InterfaceBindingPlugin.
        :rtype: str
        """
        return self._sidecar_image

    @sidecar_image.setter
    def sidecar_image(self, sidecar_image):
        """
        Sets the sidecar_image of this V1InterfaceBindingPlugin.
        SidecarImage references a container image that runs in the virt-launcher pod. The sidecar handles (libvirt) domain configuration and optional services. version: 1alphav1

        :param sidecar_image: The sidecar_image of this V1InterfaceBindingPlugin.
        :type: str
        """

        self._sidecar_image = sidecar_image

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1InterfaceBindingPlugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
