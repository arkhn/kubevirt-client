# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VolumeMigrationState(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manual_recovery_required': 'bool',
        'migrated_volumes': 'list[V1StorageMigratedVolumeInfo]'
    }

    attribute_map = {
        'manual_recovery_required': 'manualRecoveryRequired',
        'migrated_volumes': 'migratedVolumes'
    }

    def __init__(self, manual_recovery_required=None, migrated_volumes=None):
        """
        V1VolumeMigrationState - a model defined in Swagger
        """

        self._manual_recovery_required = None
        self._migrated_volumes = None

        if manual_recovery_required is not None:
          self.manual_recovery_required = manual_recovery_required
        if migrated_volumes is not None:
          self.migrated_volumes = migrated_volumes

    @property
    def manual_recovery_required(self):
        """
        Gets the manual_recovery_required of this V1VolumeMigrationState.
        ManualRecoveryRequired indicates if the update due to the migration failed and the volumes set needs to be manually restored

        :return: The manual_recovery_required of this V1VolumeMigrationState.
        :rtype: bool
        """
        return self._manual_recovery_required

    @manual_recovery_required.setter
    def manual_recovery_required(self, manual_recovery_required):
        """
        Sets the manual_recovery_required of this V1VolumeMigrationState.
        ManualRecoveryRequired indicates if the update due to the migration failed and the volumes set needs to be manually restored

        :param manual_recovery_required: The manual_recovery_required of this V1VolumeMigrationState.
        :type: bool
        """

        self._manual_recovery_required = manual_recovery_required

    @property
    def migrated_volumes(self):
        """
        Gets the migrated_volumes of this V1VolumeMigrationState.
        MigratedVolumes lists the source and destination volumes during the volume migration

        :return: The migrated_volumes of this V1VolumeMigrationState.
        :rtype: list[V1StorageMigratedVolumeInfo]
        """
        return self._migrated_volumes

    @migrated_volumes.setter
    def migrated_volumes(self, migrated_volumes):
        """
        Sets the migrated_volumes of this V1VolumeMigrationState.
        MigratedVolumes lists the source and destination volumes during the volume migration

        :param migrated_volumes: The migrated_volumes of this V1VolumeMigrationState.
        :type: list[V1StorageMigratedVolumeInfo]
        """

        self._migrated_volumes = migrated_volumes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VolumeMigrationState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
