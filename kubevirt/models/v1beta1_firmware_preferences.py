# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1FirmwarePreferences(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preferred_efi': 'V1EFI',
        'preferred_use_bios': 'bool',
        'preferred_use_bios_serial': 'bool',
        'preferred_use_efi': 'bool',
        'preferred_use_secure_boot': 'bool'
    }

    attribute_map = {
        'preferred_efi': 'preferredEfi',
        'preferred_use_bios': 'preferredUseBios',
        'preferred_use_bios_serial': 'preferredUseBiosSerial',
        'preferred_use_efi': 'preferredUseEfi',
        'preferred_use_secure_boot': 'preferredUseSecureBoot'
    }

    def __init__(self, preferred_efi=None, preferred_use_bios=None, preferred_use_bios_serial=None, preferred_use_efi=None, preferred_use_secure_boot=None):
        """
        V1beta1FirmwarePreferences - a model defined in Swagger
        """

        self._preferred_efi = None
        self._preferred_use_bios = None
        self._preferred_use_bios_serial = None
        self._preferred_use_efi = None
        self._preferred_use_secure_boot = None

        if preferred_efi is not None:
          self.preferred_efi = preferred_efi
        if preferred_use_bios is not None:
          self.preferred_use_bios = preferred_use_bios
        if preferred_use_bios_serial is not None:
          self.preferred_use_bios_serial = preferred_use_bios_serial
        if preferred_use_efi is not None:
          self.preferred_use_efi = preferred_use_efi
        if preferred_use_secure_boot is not None:
          self.preferred_use_secure_boot = preferred_use_secure_boot

    @property
    def preferred_efi(self):
        """
        Gets the preferred_efi of this V1beta1FirmwarePreferences.
        PreferredEfi optionally enables EFI

        :return: The preferred_efi of this V1beta1FirmwarePreferences.
        :rtype: V1EFI
        """
        return self._preferred_efi

    @preferred_efi.setter
    def preferred_efi(self, preferred_efi):
        """
        Sets the preferred_efi of this V1beta1FirmwarePreferences.
        PreferredEfi optionally enables EFI

        :param preferred_efi: The preferred_efi of this V1beta1FirmwarePreferences.
        :type: V1EFI
        """

        self._preferred_efi = preferred_efi

    @property
    def preferred_use_bios(self):
        """
        Gets the preferred_use_bios of this V1beta1FirmwarePreferences.
        PreferredUseBios optionally enables BIOS

        :return: The preferred_use_bios of this V1beta1FirmwarePreferences.
        :rtype: bool
        """
        return self._preferred_use_bios

    @preferred_use_bios.setter
    def preferred_use_bios(self, preferred_use_bios):
        """
        Sets the preferred_use_bios of this V1beta1FirmwarePreferences.
        PreferredUseBios optionally enables BIOS

        :param preferred_use_bios: The preferred_use_bios of this V1beta1FirmwarePreferences.
        :type: bool
        """

        self._preferred_use_bios = preferred_use_bios

    @property
    def preferred_use_bios_serial(self):
        """
        Gets the preferred_use_bios_serial of this V1beta1FirmwarePreferences.
        PreferredUseBiosSerial optionally transmitts BIOS output over the serial.  Requires PreferredUseBios to be enabled.

        :return: The preferred_use_bios_serial of this V1beta1FirmwarePreferences.
        :rtype: bool
        """
        return self._preferred_use_bios_serial

    @preferred_use_bios_serial.setter
    def preferred_use_bios_serial(self, preferred_use_bios_serial):
        """
        Sets the preferred_use_bios_serial of this V1beta1FirmwarePreferences.
        PreferredUseBiosSerial optionally transmitts BIOS output over the serial.  Requires PreferredUseBios to be enabled.

        :param preferred_use_bios_serial: The preferred_use_bios_serial of this V1beta1FirmwarePreferences.
        :type: bool
        """

        self._preferred_use_bios_serial = preferred_use_bios_serial

    @property
    def preferred_use_efi(self):
        """
        Gets the preferred_use_efi of this V1beta1FirmwarePreferences.
        PreferredUseEfi optionally enables EFI

        :return: The preferred_use_efi of this V1beta1FirmwarePreferences.
        :rtype: bool
        """
        return self._preferred_use_efi

    @preferred_use_efi.setter
    def preferred_use_efi(self, preferred_use_efi):
        """
        Sets the preferred_use_efi of this V1beta1FirmwarePreferences.
        PreferredUseEfi optionally enables EFI

        :param preferred_use_efi: The preferred_use_efi of this V1beta1FirmwarePreferences.
        :type: bool
        """

        self._preferred_use_efi = preferred_use_efi

    @property
    def preferred_use_secure_boot(self):
        """
        Gets the preferred_use_secure_boot of this V1beta1FirmwarePreferences.
        PreferredUseSecureBoot optionally enables SecureBoot and the OVMF roms will be swapped for SecureBoot-enabled ones.  Requires PreferredUseEfi and PreferredSmm to be enabled.

        :return: The preferred_use_secure_boot of this V1beta1FirmwarePreferences.
        :rtype: bool
        """
        return self._preferred_use_secure_boot

    @preferred_use_secure_boot.setter
    def preferred_use_secure_boot(self, preferred_use_secure_boot):
        """
        Sets the preferred_use_secure_boot of this V1beta1FirmwarePreferences.
        PreferredUseSecureBoot optionally enables SecureBoot and the OVMF roms will be swapped for SecureBoot-enabled ones.  Requires PreferredUseEfi and PreferredSmm to be enabled.

        :param preferred_use_secure_boot: The preferred_use_secure_boot of this V1beta1FirmwarePreferences.
        :type: bool
        """

        self._preferred_use_secure_boot = preferred_use_secure_boot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1FirmwarePreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
