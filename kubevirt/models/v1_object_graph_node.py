# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1ObjectGraphNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'children': 'list[V1ObjectGraphNode]',
        'kind': 'str',
        'labels': 'dict(str, str)',
        'object_reference': 'K8sIoApiCoreV1TypedObjectReference',
        'optional': 'bool'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'children': 'children',
        'kind': 'kind',
        'labels': 'labels',
        'object_reference': 'objectReference',
        'optional': 'optional'
    }

    def __init__(self, api_version=None, children=None, kind=None, labels=None, object_reference=None, optional=None):
        """
        V1ObjectGraphNode - a model defined in Swagger
        """

        self._api_version = None
        self._children = None
        self._kind = None
        self._labels = None
        self._object_reference = None
        self._optional = None

        if api_version is not None:
          self.api_version = api_version
        if children is not None:
          self.children = children
        if kind is not None:
          self.kind = kind
        if labels is not None:
          self.labels = labels
        self.object_reference = object_reference
        if optional is not None:
          self.optional = optional

    @property
    def api_version(self):
        """
        Gets the api_version of this V1ObjectGraphNode.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

        :return: The api_version of this V1ObjectGraphNode.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this V1ObjectGraphNode.
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

        :param api_version: The api_version of this V1ObjectGraphNode.
        :type: str
        """

        self._api_version = api_version

    @property
    def children(self):
        """
        Gets the children of this V1ObjectGraphNode.

        :return: The children of this V1ObjectGraphNode.
        :rtype: list[V1ObjectGraphNode]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this V1ObjectGraphNode.

        :param children: The children of this V1ObjectGraphNode.
        :type: list[V1ObjectGraphNode]
        """

        self._children = children

    @property
    def kind(self):
        """
        Gets the kind of this V1ObjectGraphNode.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

        :return: The kind of this V1ObjectGraphNode.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this V1ObjectGraphNode.
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

        :param kind: The kind of this V1ObjectGraphNode.
        :type: str
        """

        self._kind = kind

    @property
    def labels(self):
        """
        Gets the labels of this V1ObjectGraphNode.

        :return: The labels of this V1ObjectGraphNode.
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this V1ObjectGraphNode.

        :param labels: The labels of this V1ObjectGraphNode.
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def object_reference(self):
        """
        Gets the object_reference of this V1ObjectGraphNode.

        :return: The object_reference of this V1ObjectGraphNode.
        :rtype: K8sIoApiCoreV1TypedObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """
        Sets the object_reference of this V1ObjectGraphNode.

        :param object_reference: The object_reference of this V1ObjectGraphNode.
        :type: K8sIoApiCoreV1TypedObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference

    @property
    def optional(self):
        """
        Gets the optional of this V1ObjectGraphNode.

        :return: The optional of this V1ObjectGraphNode.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """
        Sets the optional of this V1ObjectGraphNode.

        :param optional: The optional of this V1ObjectGraphNode.
        :type: bool
        """

        self._optional = optional

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1ObjectGraphNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
