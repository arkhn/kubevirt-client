# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1VirtualMachineSnapshotContentStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_time': 'K8sIoApimachineryPkgApisMetaV1Time',
        'error': 'V1beta1Error',
        'ready_to_use': 'bool',
        'volume_snapshot_status': 'list[V1beta1VolumeSnapshotStatus]'
    }

    attribute_map = {
        'creation_time': 'creationTime',
        'error': 'error',
        'ready_to_use': 'readyToUse',
        'volume_snapshot_status': 'volumeSnapshotStatus'
    }

    def __init__(self, creation_time=None, error=None, ready_to_use=None, volume_snapshot_status=None):
        """
        V1beta1VirtualMachineSnapshotContentStatus - a model defined in Swagger
        """

        self._creation_time = None
        self._error = None
        self._ready_to_use = None
        self._volume_snapshot_status = None

        if creation_time is not None:
          self.creation_time = creation_time
        if error is not None:
          self.error = error
        if ready_to_use is not None:
          self.ready_to_use = ready_to_use
        if volume_snapshot_status is not None:
          self.volume_snapshot_status = volume_snapshot_status

    @property
    def creation_time(self):
        """
        Gets the creation_time of this V1beta1VirtualMachineSnapshotContentStatus.

        :return: The creation_time of this V1beta1VirtualMachineSnapshotContentStatus.
        :rtype: K8sIoApimachineryPkgApisMetaV1Time
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this V1beta1VirtualMachineSnapshotContentStatus.

        :param creation_time: The creation_time of this V1beta1VirtualMachineSnapshotContentStatus.
        :type: K8sIoApimachineryPkgApisMetaV1Time
        """

        self._creation_time = creation_time

    @property
    def error(self):
        """
        Gets the error of this V1beta1VirtualMachineSnapshotContentStatus.

        :return: The error of this V1beta1VirtualMachineSnapshotContentStatus.
        :rtype: V1beta1Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this V1beta1VirtualMachineSnapshotContentStatus.

        :param error: The error of this V1beta1VirtualMachineSnapshotContentStatus.
        :type: V1beta1Error
        """

        self._error = error

    @property
    def ready_to_use(self):
        """
        Gets the ready_to_use of this V1beta1VirtualMachineSnapshotContentStatus.

        :return: The ready_to_use of this V1beta1VirtualMachineSnapshotContentStatus.
        :rtype: bool
        """
        return self._ready_to_use

    @ready_to_use.setter
    def ready_to_use(self, ready_to_use):
        """
        Sets the ready_to_use of this V1beta1VirtualMachineSnapshotContentStatus.

        :param ready_to_use: The ready_to_use of this V1beta1VirtualMachineSnapshotContentStatus.
        :type: bool
        """

        self._ready_to_use = ready_to_use

    @property
    def volume_snapshot_status(self):
        """
        Gets the volume_snapshot_status of this V1beta1VirtualMachineSnapshotContentStatus.

        :return: The volume_snapshot_status of this V1beta1VirtualMachineSnapshotContentStatus.
        :rtype: list[V1beta1VolumeSnapshotStatus]
        """
        return self._volume_snapshot_status

    @volume_snapshot_status.setter
    def volume_snapshot_status(self, volume_snapshot_status):
        """
        Sets the volume_snapshot_status of this V1beta1VirtualMachineSnapshotContentStatus.

        :param volume_snapshot_status: The volume_snapshot_status of this V1beta1VirtualMachineSnapshotContentStatus.
        :type: list[V1beta1VolumeSnapshotStatus]
        """

        self._volume_snapshot_status = volume_snapshot_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1VirtualMachineSnapshotContentStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
