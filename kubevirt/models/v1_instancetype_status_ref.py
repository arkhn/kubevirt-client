# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1InstancetypeStatusRef(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controller_revision_ref': 'V1ControllerRevisionRef',
        'infer_from_volume': 'str',
        'infer_from_volume_failure_policy': 'str',
        'kind': 'str',
        'name': 'str'
    }

    attribute_map = {
        'controller_revision_ref': 'controllerRevisionRef',
        'infer_from_volume': 'inferFromVolume',
        'infer_from_volume_failure_policy': 'inferFromVolumeFailurePolicy',
        'kind': 'kind',
        'name': 'name'
    }

    def __init__(self, controller_revision_ref=None, infer_from_volume=None, infer_from_volume_failure_policy=None, kind=None, name=None):
        """
        V1InstancetypeStatusRef - a model defined in Swagger
        """

        self._controller_revision_ref = None
        self._infer_from_volume = None
        self._infer_from_volume_failure_policy = None
        self._kind = None
        self._name = None

        if controller_revision_ref is not None:
          self.controller_revision_ref = controller_revision_ref
        if infer_from_volume is not None:
          self.infer_from_volume = infer_from_volume
        if infer_from_volume_failure_policy is not None:
          self.infer_from_volume_failure_policy = infer_from_volume_failure_policy
        if kind is not None:
          self.kind = kind
        if name is not None:
          self.name = name

    @property
    def controller_revision_ref(self):
        """
        Gets the controller_revision_ref of this V1InstancetypeStatusRef.
        ControllerRef specifies the ControllerRevision storing a copy of the object captured when it is first seen by the VirtualMachine controller

        :return: The controller_revision_ref of this V1InstancetypeStatusRef.
        :rtype: V1ControllerRevisionRef
        """
        return self._controller_revision_ref

    @controller_revision_ref.setter
    def controller_revision_ref(self, controller_revision_ref):
        """
        Sets the controller_revision_ref of this V1InstancetypeStatusRef.
        ControllerRef specifies the ControllerRevision storing a copy of the object captured when it is first seen by the VirtualMachine controller

        :param controller_revision_ref: The controller_revision_ref of this V1InstancetypeStatusRef.
        :type: V1ControllerRevisionRef
        """

        self._controller_revision_ref = controller_revision_ref

    @property
    def infer_from_volume(self):
        """
        Gets the infer_from_volume of this V1InstancetypeStatusRef.
        InferFromVolume lists the name of a volume that should be used to infer or discover the resource

        :return: The infer_from_volume of this V1InstancetypeStatusRef.
        :rtype: str
        """
        return self._infer_from_volume

    @infer_from_volume.setter
    def infer_from_volume(self, infer_from_volume):
        """
        Sets the infer_from_volume of this V1InstancetypeStatusRef.
        InferFromVolume lists the name of a volume that should be used to infer or discover the resource

        :param infer_from_volume: The infer_from_volume of this V1InstancetypeStatusRef.
        :type: str
        """

        self._infer_from_volume = infer_from_volume

    @property
    def infer_from_volume_failure_policy(self):
        """
        Gets the infer_from_volume_failure_policy of this V1InstancetypeStatusRef.
        InferFromVolumeFailurePolicy controls what should happen on failure when inferring the resource

        :return: The infer_from_volume_failure_policy of this V1InstancetypeStatusRef.
        :rtype: str
        """
        return self._infer_from_volume_failure_policy

    @infer_from_volume_failure_policy.setter
    def infer_from_volume_failure_policy(self, infer_from_volume_failure_policy):
        """
        Sets the infer_from_volume_failure_policy of this V1InstancetypeStatusRef.
        InferFromVolumeFailurePolicy controls what should happen on failure when inferring the resource

        :param infer_from_volume_failure_policy: The infer_from_volume_failure_policy of this V1InstancetypeStatusRef.
        :type: str
        """

        self._infer_from_volume_failure_policy = infer_from_volume_failure_policy

    @property
    def kind(self):
        """
        Gets the kind of this V1InstancetypeStatusRef.
        Kind specifies the kind of resource

        :return: The kind of this V1InstancetypeStatusRef.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this V1InstancetypeStatusRef.
        Kind specifies the kind of resource

        :param kind: The kind of this V1InstancetypeStatusRef.
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """
        Gets the name of this V1InstancetypeStatusRef.
        Name is the name of resource

        :return: The name of this V1InstancetypeStatusRef.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1InstancetypeStatusRef.
        Name is the name of resource

        :param name: The name of this V1InstancetypeStatusRef.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1InstancetypeStatusRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
