# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineInstanceMigrationSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connect_url': 'str',
        'migration_id': 'str'
    }

    attribute_map = {
        'connect_url': 'connectURL',
        'migration_id': 'migrationID'
    }

    def __init__(self, connect_url='', migration_id=''):
        """
        V1VirtualMachineInstanceMigrationSource - a model defined in Swagger
        """

        self._connect_url = None
        self._migration_id = None

        self.connect_url = connect_url
        self.migration_id = migration_id

    @property
    def connect_url(self):
        """
        Gets the connect_url of this V1VirtualMachineInstanceMigrationSource.
        The synchronization controller URL to connect to.

        :return: The connect_url of this V1VirtualMachineInstanceMigrationSource.
        :rtype: str
        """
        return self._connect_url

    @connect_url.setter
    def connect_url(self, connect_url):
        """
        Sets the connect_url of this V1VirtualMachineInstanceMigrationSource.
        The synchronization controller URL to connect to.

        :param connect_url: The connect_url of this V1VirtualMachineInstanceMigrationSource.
        :type: str
        """
        if connect_url is None:
            raise ValueError("Invalid value for `connect_url`, must not be `None`")

        self._connect_url = connect_url

    @property
    def migration_id(self):
        """
        Gets the migration_id of this V1VirtualMachineInstanceMigrationSource.
        A unique identifier to identify this migration.

        :return: The migration_id of this V1VirtualMachineInstanceMigrationSource.
        :rtype: str
        """
        return self._migration_id

    @migration_id.setter
    def migration_id(self, migration_id):
        """
        Sets the migration_id of this V1VirtualMachineInstanceMigrationSource.
        A unique identifier to identify this migration.

        :param migration_id: The migration_id of this V1VirtualMachineInstanceMigrationSource.
        :type: str
        """
        if migration_id is None:
            raise ValueError("Invalid value for `migration_id`, must not be `None`")

        self._migration_id = migration_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineInstanceMigrationSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
