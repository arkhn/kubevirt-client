# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1DeviceResourceClaimStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'V1DeviceAttribute',
        'name': 'str',
        'resource_claim_name': 'str'
    }

    attribute_map = {
        'attributes': 'attributes',
        'name': 'name',
        'resource_claim_name': 'resourceClaimName'
    }

    def __init__(self, attributes=None, name=None, resource_claim_name=None):
        """
        V1DeviceResourceClaimStatus - a model defined in Swagger
        """

        self._attributes = None
        self._name = None
        self._resource_claim_name = None

        if attributes is not None:
          self.attributes = attributes
        if name is not None:
          self.name = name
        if resource_claim_name is not None:
          self.resource_claim_name = resource_claim_name

    @property
    def attributes(self):
        """
        Gets the attributes of this V1DeviceResourceClaimStatus.
        Attributes are properties of the device that could be used by kubevirt and other copmonents to learn more about the device, like pciAddress or mdevUUID

        :return: The attributes of this V1DeviceResourceClaimStatus.
        :rtype: V1DeviceAttribute
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this V1DeviceResourceClaimStatus.
        Attributes are properties of the device that could be used by kubevirt and other copmonents to learn more about the device, like pciAddress or mdevUUID

        :param attributes: The attributes of this V1DeviceResourceClaimStatus.
        :type: V1DeviceAttribute
        """

        self._attributes = attributes

    @property
    def name(self):
        """
        Gets the name of this V1DeviceResourceClaimStatus.
        Name is the name of actual device on the host provisioned by the driver as reflected in resourceclaim.status

        :return: The name of this V1DeviceResourceClaimStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1DeviceResourceClaimStatus.
        Name is the name of actual device on the host provisioned by the driver as reflected in resourceclaim.status

        :param name: The name of this V1DeviceResourceClaimStatus.
        :type: str
        """

        self._name = name

    @property
    def resource_claim_name(self):
        """
        Gets the resource_claim_name of this V1DeviceResourceClaimStatus.
        ResourceClaimName is the name of the resource claims object used to provision this resource

        :return: The resource_claim_name of this V1DeviceResourceClaimStatus.
        :rtype: str
        """
        return self._resource_claim_name

    @resource_claim_name.setter
    def resource_claim_name(self, resource_claim_name):
        """
        Sets the resource_claim_name of this V1DeviceResourceClaimStatus.
        ResourceClaimName is the name of the resource claims object used to provision this resource

        :param resource_claim_name: The resource_claim_name of this V1DeviceResourceClaimStatus.
        :type: str
        """

        self._resource_claim_name = resource_claim_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1DeviceResourceClaimStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
