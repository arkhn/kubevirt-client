# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1ArchConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amd64': 'V1ArchSpecificConfiguration',
        'arm64': 'V1ArchSpecificConfiguration',
        'default_architecture': 'str',
        'ppc64le': 'V1ArchSpecificConfiguration',
        's390x': 'V1ArchSpecificConfiguration'
    }

    attribute_map = {
        'amd64': 'amd64',
        'arm64': 'arm64',
        'default_architecture': 'defaultArchitecture',
        'ppc64le': 'ppc64le',
        's390x': 's390x'
    }

    def __init__(self, amd64=None, arm64=None, default_architecture=None, ppc64le=None, s390x=None):
        """
        V1ArchConfiguration - a model defined in Swagger
        """

        self._amd64 = None
        self._arm64 = None
        self._default_architecture = None
        self._ppc64le = None
        self._s390x = None

        if amd64 is not None:
          self.amd64 = amd64
        if arm64 is not None:
          self.arm64 = arm64
        if default_architecture is not None:
          self.default_architecture = default_architecture
        if ppc64le is not None:
          self.ppc64le = ppc64le
        if s390x is not None:
          self.s390x = s390x

    @property
    def amd64(self):
        """
        Gets the amd64 of this V1ArchConfiguration.

        :return: The amd64 of this V1ArchConfiguration.
        :rtype: V1ArchSpecificConfiguration
        """
        return self._amd64

    @amd64.setter
    def amd64(self, amd64):
        """
        Sets the amd64 of this V1ArchConfiguration.

        :param amd64: The amd64 of this V1ArchConfiguration.
        :type: V1ArchSpecificConfiguration
        """

        self._amd64 = amd64

    @property
    def arm64(self):
        """
        Gets the arm64 of this V1ArchConfiguration.

        :return: The arm64 of this V1ArchConfiguration.
        :rtype: V1ArchSpecificConfiguration
        """
        return self._arm64

    @arm64.setter
    def arm64(self, arm64):
        """
        Sets the arm64 of this V1ArchConfiguration.

        :param arm64: The arm64 of this V1ArchConfiguration.
        :type: V1ArchSpecificConfiguration
        """

        self._arm64 = arm64

    @property
    def default_architecture(self):
        """
        Gets the default_architecture of this V1ArchConfiguration.

        :return: The default_architecture of this V1ArchConfiguration.
        :rtype: str
        """
        return self._default_architecture

    @default_architecture.setter
    def default_architecture(self, default_architecture):
        """
        Sets the default_architecture of this V1ArchConfiguration.

        :param default_architecture: The default_architecture of this V1ArchConfiguration.
        :type: str
        """

        self._default_architecture = default_architecture

    @property
    def ppc64le(self):
        """
        Gets the ppc64le of this V1ArchConfiguration.
        Deprecated: ppc64le architecture is no longer supported.

        :return: The ppc64le of this V1ArchConfiguration.
        :rtype: V1ArchSpecificConfiguration
        """
        return self._ppc64le

    @ppc64le.setter
    def ppc64le(self, ppc64le):
        """
        Sets the ppc64le of this V1ArchConfiguration.
        Deprecated: ppc64le architecture is no longer supported.

        :param ppc64le: The ppc64le of this V1ArchConfiguration.
        :type: V1ArchSpecificConfiguration
        """

        self._ppc64le = ppc64le

    @property
    def s390x(self):
        """
        Gets the s390x of this V1ArchConfiguration.

        :return: The s390x of this V1ArchConfiguration.
        :rtype: V1ArchSpecificConfiguration
        """
        return self._s390x

    @s390x.setter
    def s390x(self, s390x):
        """
        Sets the s390x of this V1ArchConfiguration.

        :param s390x: The s390x of this V1ArchConfiguration.
        :type: V1ArchSpecificConfiguration
        """

        self._s390x = s390x

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1ArchConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
