# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineInstanceGuestOSLoad(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'load15m': 'float',
        'load15m_set': 'bool',
        'load1m': 'float',
        'load1m_set': 'bool',
        'load5m': 'float',
        'load5m_set': 'bool'
    }

    attribute_map = {
        'load15m': 'load15m',
        'load15m_set': 'load15mSet',
        'load1m': 'load1m',
        'load1m_set': 'load1mSet',
        'load5m': 'load5m',
        'load5m_set': 'load5mSet'
    }

    def __init__(self, load15m=None, load15m_set=None, load1m=None, load1m_set=None, load5m=None, load5m_set=None):
        """
        V1VirtualMachineInstanceGuestOSLoad - a model defined in Swagger
        """

        self._load15m = None
        self._load15m_set = None
        self._load1m = None
        self._load1m_set = None
        self._load5m = None
        self._load5m_set = None

        if load15m is not None:
          self.load15m = load15m
        if load15m_set is not None:
          self.load15m_set = load15m_set
        if load1m is not None:
          self.load1m = load1m
        if load1m_set is not None:
          self.load1m_set = load1m_set
        if load5m is not None:
          self.load5m = load5m
        if load5m_set is not None:
          self.load5m_set = load5m_set

    @property
    def load15m(self):
        """
        Gets the load15m of this V1VirtualMachineInstanceGuestOSLoad.
        Load average over 15 minutes

        :return: The load15m of this V1VirtualMachineInstanceGuestOSLoad.
        :rtype: float
        """
        return self._load15m

    @load15m.setter
    def load15m(self, load15m):
        """
        Sets the load15m of this V1VirtualMachineInstanceGuestOSLoad.
        Load average over 15 minutes

        :param load15m: The load15m of this V1VirtualMachineInstanceGuestOSLoad.
        :type: float
        """

        self._load15m = load15m

    @property
    def load15m_set(self):
        """
        Gets the load15m_set of this V1VirtualMachineInstanceGuestOSLoad.
        Load15mSet indicates whether the 15 minute load average is set

        :return: The load15m_set of this V1VirtualMachineInstanceGuestOSLoad.
        :rtype: bool
        """
        return self._load15m_set

    @load15m_set.setter
    def load15m_set(self, load15m_set):
        """
        Sets the load15m_set of this V1VirtualMachineInstanceGuestOSLoad.
        Load15mSet indicates whether the 15 minute load average is set

        :param load15m_set: The load15m_set of this V1VirtualMachineInstanceGuestOSLoad.
        :type: bool
        """

        self._load15m_set = load15m_set

    @property
    def load1m(self):
        """
        Gets the load1m of this V1VirtualMachineInstanceGuestOSLoad.
        Load average over 1 minute

        :return: The load1m of this V1VirtualMachineInstanceGuestOSLoad.
        :rtype: float
        """
        return self._load1m

    @load1m.setter
    def load1m(self, load1m):
        """
        Sets the load1m of this V1VirtualMachineInstanceGuestOSLoad.
        Load average over 1 minute

        :param load1m: The load1m of this V1VirtualMachineInstanceGuestOSLoad.
        :type: float
        """

        self._load1m = load1m

    @property
    def load1m_set(self):
        """
        Gets the load1m_set of this V1VirtualMachineInstanceGuestOSLoad.
        Load1mSet indicates whether the 1 minute load average is set

        :return: The load1m_set of this V1VirtualMachineInstanceGuestOSLoad.
        :rtype: bool
        """
        return self._load1m_set

    @load1m_set.setter
    def load1m_set(self, load1m_set):
        """
        Sets the load1m_set of this V1VirtualMachineInstanceGuestOSLoad.
        Load1mSet indicates whether the 1 minute load average is set

        :param load1m_set: The load1m_set of this V1VirtualMachineInstanceGuestOSLoad.
        :type: bool
        """

        self._load1m_set = load1m_set

    @property
    def load5m(self):
        """
        Gets the load5m of this V1VirtualMachineInstanceGuestOSLoad.
        Load average over 5 minutes

        :return: The load5m of this V1VirtualMachineInstanceGuestOSLoad.
        :rtype: float
        """
        return self._load5m

    @load5m.setter
    def load5m(self, load5m):
        """
        Sets the load5m of this V1VirtualMachineInstanceGuestOSLoad.
        Load average over 5 minutes

        :param load5m: The load5m of this V1VirtualMachineInstanceGuestOSLoad.
        :type: float
        """

        self._load5m = load5m

    @property
    def load5m_set(self):
        """
        Gets the load5m_set of this V1VirtualMachineInstanceGuestOSLoad.
        Load5mSet indicates whether the 5 minute load average is set

        :return: The load5m_set of this V1VirtualMachineInstanceGuestOSLoad.
        :rtype: bool
        """
        return self._load5m_set

    @load5m_set.setter
    def load5m_set(self, load5m_set):
        """
        Sets the load5m_set of this V1VirtualMachineInstanceGuestOSLoad.
        Load5mSet indicates whether the 5 minute load average is set

        :param load5m_set: The load5m_set of this V1VirtualMachineInstanceGuestOSLoad.
        :type: bool
        """

        self._load5m_set = load5m_set

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineInstanceGuestOSLoad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
