# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1VirtualMachineInstanceMigrationTargetState(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachment_pod_uid': 'str',
        'cpu_set': 'list[int]',
        'direct_migration_node_ports': 'dict(str, int)',
        'domain_detected': 'bool',
        'domain_name': 'str',
        'domain_namespace': 'str',
        'domain_ready_timestamp': 'K8sIoApimachineryPkgApisMetaV1Time',
        'migration_uid': 'str',
        'node': 'str',
        'node_address': 'str',
        'node_topology': 'str',
        'persistent_state_pvc_name': 'str',
        'pod': 'str',
        'sync_address': 'str'
    }

    attribute_map = {
        'attachment_pod_uid': 'attachmentPodUID',
        'cpu_set': 'cpuSet',
        'direct_migration_node_ports': 'directMigrationNodePorts',
        'domain_detected': 'domainDetected',
        'domain_name': 'domainName',
        'domain_namespace': 'domainNamespace',
        'domain_ready_timestamp': 'domainReadyTimestamp',
        'migration_uid': 'migrationUID',
        'node': 'node',
        'node_address': 'nodeAddress',
        'node_topology': 'nodeTopology',
        'persistent_state_pvc_name': 'persistentStatePVCName',
        'pod': 'pod',
        'sync_address': 'syncAddress'
    }

    def __init__(self, attachment_pod_uid=None, cpu_set=None, direct_migration_node_ports=None, domain_detected=None, domain_name=None, domain_namespace=None, domain_ready_timestamp=None, migration_uid=None, node=None, node_address=None, node_topology=None, persistent_state_pvc_name=None, pod=None, sync_address=None):
        """
        V1VirtualMachineInstanceMigrationTargetState - a model defined in Swagger
        """

        self._attachment_pod_uid = None
        self._cpu_set = None
        self._direct_migration_node_ports = None
        self._domain_detected = None
        self._domain_name = None
        self._domain_namespace = None
        self._domain_ready_timestamp = None
        self._migration_uid = None
        self._node = None
        self._node_address = None
        self._node_topology = None
        self._persistent_state_pvc_name = None
        self._pod = None
        self._sync_address = None

        if attachment_pod_uid is not None:
          self.attachment_pod_uid = attachment_pod_uid
        if cpu_set is not None:
          self.cpu_set = cpu_set
        if direct_migration_node_ports is not None:
          self.direct_migration_node_ports = direct_migration_node_ports
        if domain_detected is not None:
          self.domain_detected = domain_detected
        if domain_name is not None:
          self.domain_name = domain_name
        if domain_namespace is not None:
          self.domain_namespace = domain_namespace
        if domain_ready_timestamp is not None:
          self.domain_ready_timestamp = domain_ready_timestamp
        if migration_uid is not None:
          self.migration_uid = migration_uid
        if node is not None:
          self.node = node
        if node_address is not None:
          self.node_address = node_address
        if node_topology is not None:
          self.node_topology = node_topology
        if persistent_state_pvc_name is not None:
          self.persistent_state_pvc_name = persistent_state_pvc_name
        if pod is not None:
          self.pod = pod
        if sync_address is not None:
          self.sync_address = sync_address

    @property
    def attachment_pod_uid(self):
        """
        Gets the attachment_pod_uid of this V1VirtualMachineInstanceMigrationTargetState.
        The UID of the target attachment pod for hotplug volumes

        :return: The attachment_pod_uid of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._attachment_pod_uid

    @attachment_pod_uid.setter
    def attachment_pod_uid(self, attachment_pod_uid):
        """
        Sets the attachment_pod_uid of this V1VirtualMachineInstanceMigrationTargetState.
        The UID of the target attachment pod for hotplug volumes

        :param attachment_pod_uid: The attachment_pod_uid of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._attachment_pod_uid = attachment_pod_uid

    @property
    def cpu_set(self):
        """
        Gets the cpu_set of this V1VirtualMachineInstanceMigrationTargetState.
        If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node

        :return: The cpu_set of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: list[int]
        """
        return self._cpu_set

    @cpu_set.setter
    def cpu_set(self, cpu_set):
        """
        Sets the cpu_set of this V1VirtualMachineInstanceMigrationTargetState.
        If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node

        :param cpu_set: The cpu_set of this V1VirtualMachineInstanceMigrationTargetState.
        :type: list[int]
        """

        self._cpu_set = cpu_set

    @property
    def direct_migration_node_ports(self):
        """
        Gets the direct_migration_node_ports of this V1VirtualMachineInstanceMigrationTargetState.
        The list of ports opened for live migration on the destination node

        :return: The direct_migration_node_ports of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: dict(str, int)
        """
        return self._direct_migration_node_ports

    @direct_migration_node_ports.setter
    def direct_migration_node_ports(self, direct_migration_node_ports):
        """
        Sets the direct_migration_node_ports of this V1VirtualMachineInstanceMigrationTargetState.
        The list of ports opened for live migration on the destination node

        :param direct_migration_node_ports: The direct_migration_node_ports of this V1VirtualMachineInstanceMigrationTargetState.
        :type: dict(str, int)
        """

        self._direct_migration_node_ports = direct_migration_node_ports

    @property
    def domain_detected(self):
        """
        Gets the domain_detected of this V1VirtualMachineInstanceMigrationTargetState.
        The Target Node has seen the Domain Start Event

        :return: The domain_detected of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: bool
        """
        return self._domain_detected

    @domain_detected.setter
    def domain_detected(self, domain_detected):
        """
        Sets the domain_detected of this V1VirtualMachineInstanceMigrationTargetState.
        The Target Node has seen the Domain Start Event

        :param domain_detected: The domain_detected of this V1VirtualMachineInstanceMigrationTargetState.
        :type: bool
        """

        self._domain_detected = domain_detected

    @property
    def domain_name(self):
        """
        Gets the domain_name of this V1VirtualMachineInstanceMigrationTargetState.
        The name of the domain on the source libvirt domain

        :return: The domain_name of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """
        Sets the domain_name of this V1VirtualMachineInstanceMigrationTargetState.
        The name of the domain on the source libvirt domain

        :param domain_name: The domain_name of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._domain_name = domain_name

    @property
    def domain_namespace(self):
        """
        Gets the domain_namespace of this V1VirtualMachineInstanceMigrationTargetState.
        Namespace used in the name of the source libvirt domain. Can be used to find and modify paths in the domain

        :return: The domain_namespace of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._domain_namespace

    @domain_namespace.setter
    def domain_namespace(self, domain_namespace):
        """
        Sets the domain_namespace of this V1VirtualMachineInstanceMigrationTargetState.
        Namespace used in the name of the source libvirt domain. Can be used to find and modify paths in the domain

        :param domain_namespace: The domain_namespace of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._domain_namespace = domain_namespace

    @property
    def domain_ready_timestamp(self):
        """
        Gets the domain_ready_timestamp of this V1VirtualMachineInstanceMigrationTargetState.
        The timestamp at which the target node detects the domain is active

        :return: The domain_ready_timestamp of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: K8sIoApimachineryPkgApisMetaV1Time
        """
        return self._domain_ready_timestamp

    @domain_ready_timestamp.setter
    def domain_ready_timestamp(self, domain_ready_timestamp):
        """
        Sets the domain_ready_timestamp of this V1VirtualMachineInstanceMigrationTargetState.
        The timestamp at which the target node detects the domain is active

        :param domain_ready_timestamp: The domain_ready_timestamp of this V1VirtualMachineInstanceMigrationTargetState.
        :type: K8sIoApimachineryPkgApisMetaV1Time
        """

        self._domain_ready_timestamp = domain_ready_timestamp

    @property
    def migration_uid(self):
        """
        Gets the migration_uid of this V1VirtualMachineInstanceMigrationTargetState.
        The Source VirtualMachineInstanceMigration object associated with this migration

        :return: The migration_uid of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._migration_uid

    @migration_uid.setter
    def migration_uid(self, migration_uid):
        """
        Sets the migration_uid of this V1VirtualMachineInstanceMigrationTargetState.
        The Source VirtualMachineInstanceMigration object associated with this migration

        :param migration_uid: The migration_uid of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._migration_uid = migration_uid

    @property
    def node(self):
        """
        Gets the node of this V1VirtualMachineInstanceMigrationTargetState.
        The source node that the VMI originated on

        :return: The node of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this V1VirtualMachineInstanceMigrationTargetState.
        The source node that the VMI originated on

        :param node: The node of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._node = node

    @property
    def node_address(self):
        """
        Gets the node_address of this V1VirtualMachineInstanceMigrationTargetState.
        The address of the target node to use for the migration

        :return: The node_address of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._node_address

    @node_address.setter
    def node_address(self, node_address):
        """
        Sets the node_address of this V1VirtualMachineInstanceMigrationTargetState.
        The address of the target node to use for the migration

        :param node_address: The node_address of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._node_address = node_address

    @property
    def node_topology(self):
        """
        Gets the node_topology of this V1VirtualMachineInstanceMigrationTargetState.
        If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node

        :return: The node_topology of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._node_topology

    @node_topology.setter
    def node_topology(self, node_topology):
        """
        Sets the node_topology of this V1VirtualMachineInstanceMigrationTargetState.
        If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node

        :param node_topology: The node_topology of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._node_topology = node_topology

    @property
    def persistent_state_pvc_name(self):
        """
        Gets the persistent_state_pvc_name of this V1VirtualMachineInstanceMigrationTargetState.
        If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here

        :return: The persistent_state_pvc_name of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._persistent_state_pvc_name

    @persistent_state_pvc_name.setter
    def persistent_state_pvc_name(self, persistent_state_pvc_name):
        """
        Sets the persistent_state_pvc_name of this V1VirtualMachineInstanceMigrationTargetState.
        If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here

        :param persistent_state_pvc_name: The persistent_state_pvc_name of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._persistent_state_pvc_name = persistent_state_pvc_name

    @property
    def pod(self):
        """
        Gets the pod of this V1VirtualMachineInstanceMigrationTargetState.
        The source pod that the VMI is originated on

        :return: The pod of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """
        Sets the pod of this V1VirtualMachineInstanceMigrationTargetState.
        The source pod that the VMI is originated on

        :param pod: The pod of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._pod = pod

    @property
    def sync_address(self):
        """
        Gets the sync_address of this V1VirtualMachineInstanceMigrationTargetState.
        The ip address/fqdn:port combination to use to synchronize the VMI with the target.

        :return: The sync_address of this V1VirtualMachineInstanceMigrationTargetState.
        :rtype: str
        """
        return self._sync_address

    @sync_address.setter
    def sync_address(self, sync_address):
        """
        Sets the sync_address of this V1VirtualMachineInstanceMigrationTargetState.
        The ip address/fqdn:port combination to use to synchronize the VMI with the target.

        :param sync_address: The sync_address of this V1VirtualMachineInstanceMigrationTargetState.
        :type: str
        """

        self._sync_address = sync_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1VirtualMachineInstanceMigrationTargetState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
