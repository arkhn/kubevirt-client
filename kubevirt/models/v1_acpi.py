# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1ACPI(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msdm_name_ref': 'str',
        'slic_name_ref': 'str'
    }

    attribute_map = {
        'msdm_name_ref': 'msdmNameRef',
        'slic_name_ref': 'slicNameRef'
    }

    def __init__(self, msdm_name_ref=None, slic_name_ref=None):
        """
        V1ACPI - a model defined in Swagger
        """

        self._msdm_name_ref = None
        self._slic_name_ref = None

        if msdm_name_ref is not None:
          self.msdm_name_ref = msdm_name_ref
        if slic_name_ref is not None:
          self.slic_name_ref = slic_name_ref

    @property
    def msdm_name_ref(self):
        """
        Gets the msdm_name_ref of this V1ACPI.
        Similar to SlicNameRef, another ACPI entry that is used in more recent Windows versions. The above points to the spec of MSDM too.

        :return: The msdm_name_ref of this V1ACPI.
        :rtype: str
        """
        return self._msdm_name_ref

    @msdm_name_ref.setter
    def msdm_name_ref(self, msdm_name_ref):
        """
        Sets the msdm_name_ref of this V1ACPI.
        Similar to SlicNameRef, another ACPI entry that is used in more recent Windows versions. The above points to the spec of MSDM too.

        :param msdm_name_ref: The msdm_name_ref of this V1ACPI.
        :type: str
        """

        self._msdm_name_ref = msdm_name_ref

    @property
    def slic_name_ref(self):
        """
        Gets the slic_name_ref of this V1ACPI.
        SlicNameRef should match the volume name of a secret object. The data in the secret should be a binary blob that follows the ACPI SLIC standard, see: https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)

        :return: The slic_name_ref of this V1ACPI.
        :rtype: str
        """
        return self._slic_name_ref

    @slic_name_ref.setter
    def slic_name_ref(self, slic_name_ref):
        """
        Sets the slic_name_ref of this V1ACPI.
        SlicNameRef should match the volume name of a secret object. The data in the secret should be a binary blob that follows the ACPI SLIC standard, see: https://learn.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653305(v=vs.85)

        :param slic_name_ref: The slic_name_ref of this V1ACPI.
        :type: str
        """

        self._slic_name_ref = slic_name_ref

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1ACPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
